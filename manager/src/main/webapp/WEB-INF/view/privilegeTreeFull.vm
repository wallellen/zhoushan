<html>
	<head>
		<script src="$!request.getContextPath()/public/js/d3.v3.min.js"></script>
		<style>

        .node {
          cursor: pointer;
        }
        
        .node circle {
          fill: #fff;
          stroke: steelblue;
          stroke-width: 1.5px;
        }
        
        .node text {
          font: 10px sans-serif;
        }
        
        .link {
          fill: none;
          stroke: #ccc;
          stroke-width: 1.5px;
        }
		
		.link_valid {
		  fill: none;
		  stroke: steelblue;
		  stroke-width: 1.5px;
		}
		
		.d3-tip {
			line-height: 1;
			font-weight: bold;
			padding: 12px;
			background: rgba(0, 0, 0, 0.8);
			color: #fff;
			border-radius: 2px;
		}
		
		#contextMenu {
		    position: absolute;
        display:none;
        width: 100px;
		}
		
		#contextMenu .dropdown-menu {
		    display:block;
		    position:static;
		    margin-bottom:5px;		   
		}

    .chats li.in div.avatar {
        float: left;
        margin-right: 10px;
    }

    .chats li.out div.avatar {
        float: right;
        margin-left: 10px;
    }

    .chats li div.avatar {
        height: 45px;
        width: 45px;
        -webkit-border-radius: 50% !important;
        -moz-border-radius: 50% !important;
        border-radius: 50% !important;
    }


		</style>
	</head>
	<body>
    <div class="row-fluid">
      <div class="span4">
        <div class="portlet">
                <div class="portlet-title line">
                  <h4><i class="icon-comments"></i>权限详情</h4>
                </div>
                <div class="portlet-body" id="chats">
                  
                    <ul class="chats">
                      <li class="in">
                        <div class="avatar" >示例权限名</div>
                        <div class="message">
                          <span class="arrow"></span>
                          <a href="#" class="name">父级权限名</a>
                          <span class="body">
                            权限职责说明
                          </span>
                        </div>
                      </li>
                      
                    </ul>
                  
                  <div class="chat-form">
                    <div class="input-cont" id="pri_to_add">   
                      <span class='label label-important'>NOTE!</span>
                    </div>
                    <div class="btn-cont" style= "margin-top: -35px !important;" > 
                      <a class="btn blue icn-only" id='add_pri'><i class="icon-ok icon-white"></i></a>
                    </div>
                  </div>
                </div>
              </div>
      </div>
      <div id="treeDiv" class="span8"></div>
    </div>
		<div id="contextMenu" class="dropdown clearfix">
			<ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu" >
				<li><a tabindex="1" href="#">启用权限</a></li>
				<li><a tabindex="0" href="#">停用权限</a></li>
			</ul>
		</div>
		
	</body>
	<script>
	
	   jQuery(function(){
		  drawTree();
		  
		  bindContextMenu();

      $('#add_pri').click(addPris);
	   });

     var addPrivilegeInAddBox = function(pri_name) {
        $('#pri_to_add').append("<span class='label label-success' style='margin-right:2px'>"+locationArray[pri_name]+"</span>");
     };

     function addPris(){

        var labels = $('#pri_to_add span.label-success');
        //clear pri_to_add box
        $('#pri_to_add span.label-success').remove();
        //add msg to ul.charts

     }
	   
	   function bindContextMenu(){
		  
  		  $('#contextMenu').on('click','a',function(){
          
            addPrivilegeInAddBox($('#contextMenu').attr('pri_name'));
  			    $('#contextMenu').hide();
  		  });
  		  
  		  $('body').on('click',function(){
  		      $('#contextMenu').hide();
  		  });
 
	   }
	   
	   function drawTree () 
     {

        var margin = {top: 20, right: 120, bottom: 20, left: 120},
  		  width = 960 - margin.right - margin.left,
  		  height = 800 - margin.top - margin.bottom;
  		
  	    var i = 0,duration = 750,root;
  	    var tree = d3.layout.tree().size([height, width]);

    	  var diagonal = d3.svg.diagonal().projection(function(d) { return [d.y, d.x]; });
    
    	  var svg = d3.select("#treeDiv").append("svg")
		                .attr("width", width + margin.right + margin.left)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
     
         d3.json("$!request.getContextPath()/privilegeManager/privilegeTree?action=get_all",function(error, flare){

              root = flare.tree;
              root.x0 = height / 2;
              root.y0 = 0;
    	    
              function collapse(d) {
                  if (d.children) {
                      d._children = d.children;
                      d._children.forEach(collapse);
                      d.children = null;
                  }
              }

              root.children.forEach(collapse);
              update(root);
          });
    
          d3.select(self.frameElement).style("height", "800px");
			
    					
          function update(source) {

              // Compute the new tree layout.
              var nodes = tree.nodes(root).reverse(),
                  links = tree.links(nodes);
    
              // Normalize for fixed-depth.
              nodes.forEach(function(d) { d.y = d.depth * 180; });
    
              // Update the nodes…
              var node = svg.selectAll("g.node")
                            .data(nodes, function(d) { return d.id || (d.id = ++i); });
    
              // Enter any new nodes at the parent's previous position.
              var nodeEnter = node.enter().append("g")
                                  .attr("class", "node")
                                  .attr("transform", function(d) { 
    							                   return "translate(" + source.y0 + "," + source.x0 + ")"; 
    						                  })
								                  .on("contextmenu",contextMenu);
    
              nodeEnter.append("circle")
                       .attr("r", 1e-6)
                       .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });
						   
			        //bind click to node
				      nodeEnter.selectAll("circle").on("click",click);
        
              nodeEnter.append("text")
                       .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
                       .attr("dy", ".35em")
                       .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
                        .text(function(d) { return locationArray[d.privilege.name]; })
                        .style("fill-opacity", 1e-6);
						  
        
               // Transition nodes to their new position.
               var nodeUpdate = node.transition()
                                    .duration(duration)
                                    .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });
        
               nodeUpdate.select("circle")
                         .attr("r", 4.5)
                         .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });
        
                nodeUpdate.select("text")
                          .style("fill-opacity", 1);
        
                // Transition exiting nodes to the parent's new position.
                var nodeExit = node.exit().transition()
                                   .duration(duration)
                                   .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
                                   .remove();
        
                nodeExit.select("circle").attr("r", 1e-6);
        
                nodeExit.select("text").style("fill-opacity", 1e-6);
        
                // Update the links…
                var link = svg.selectAll("path ")
                             .data(links, function(d) { return d.target.id; });
           
                // Enter any new links at the parent's previous position.
                link.enter().insert("path", "g")
                            .attr("class", "link")
                            .attr("d", function(d) {
                                   var o = {x: source.x0, y: source.y0};
                                   return diagonal({source: o, target: o});
                            });
        
                // Transition links to their new position.
                link.transition().duration(duration).attr("d", diagonal);
        
                // Transition exiting nodes to the parent's new position.
                link.exit().transition().duration(duration)
                           .attr("d", function(d) {
                                var o = {x: source.x, y: source.y};
                                return diagonal({source: o, target: o});
                           })
                           .remove();
        
                // Stash the old positions for transition.
                nodes.forEach(function(d) {
                                d.x0 = d.x;
                                d.y0 = d.y;
                });
            }
    
            // Toggle children on click.
            function click(d) {
                if (d.children) {
                    d._children = d.children;
                    d.children = null;
                } else {
                   d.children = d._children;
                   d._children = null;
                }
                update(d);

                addPrivilegeInfoInBox(d);
            }

      function addPrivilegeInfoInBox(node) {

          var ul = $('ul.chats');

          var li = "<li class='in'><div class='avatar' >" + locationArray[node.privilege.name]+ "</div>"
                    + "<div class='message'><span class='arrow'></span><a class='name'>"+locationArray[node.privilege.parent]+"</a>"
                    +"<span class='body'>"+node.privilege.comment+"</span>"
                    +"</div></li>";
          ul.append(li);

      }
			
			function contextMenu(data , index ) {
			
			   var position = d3.mouse(this);

               var x, y;
        
               if (d3.event.pageX || d3.event.pageY) {
                  var x = d3.event.pageX;
                  var y = d3.event.pageY;
               } else if (d3.event.clientX || d3.event.clientY) {
                  var x = d3.event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                  var y = d3.event.clientY + document.body.scrollTop + document.documentElement.scrollTop;
               }
			   
			   $('#contextMenu').css({
    			  display : 'block',
    				left : x+2,
    				top : y+2,
    				position : 'absolute' 
			  });

         $('#contextMenu').attr('pri_name', data.privilege.name);
			  
			  d3.event.preventDefault();
			}
          
	 }
	 </script>
</html>